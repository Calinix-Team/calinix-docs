{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;"},"docs":[{"location":"","text":"Welcome to CalinixOS User Guide For full documentation visit calinixOS Website . This user guide guides you towards the basic guide to CalinixOS and it's components. It also guides you towards how to get started with your tools in CalinixOS. This Guide is not final. Content is being added slowly but surely.","title":"Welcome to CalinixOS User Guide"},{"location":"#welcome-to-calinixos-user-guide","text":"For full documentation visit calinixOS Website . This user guide guides you towards the basic guide to CalinixOS and it's components. It also guides you towards how to get started with your tools in CalinixOS. This Guide is not final. Content is being added slowly but surely.","title":"Welcome to CalinixOS User Guide"},{"location":"introduction/","text":"CalinixOS CalinixOS is a power-user-friendly GNU/Linux distribution based on the independently developed Arch Linux. Within the Linux community, Arch itself is renowned for being an exceptionally fast, powerful, and lightweight distribution that provides access to the very latest cutting-edge software. However, Arch is also traditionally aimed at more experienced or technically-minded users as you have to install all your tools step by step writing tons of commands. Shan't be a proble for the power user but is a bit easier. CalinixOS is suitable for intermediate as well as experienced Linux users. For newcomers, a user-friendly installer is provided, and the system itself is designed to work fully\u201cstraight out of the box\u201d with features including: Pre-installed Window Manager with a Simple but Flexible UI representing the OSX-like feel. Pre-installed graphical applications to easily install software and update your system Pre-installed codecs to play multimedia files Performance tweaks out of the box to make your experience super fast Features Speed, power, and efficiency Access to the very latest cutting- and bleeding-edge software A \u201crolling release\u201d development model that provides the most upto-date system possible without the need to regularly install a new operating system release. Access to the Arch User Repository Software configured for professional users who like a professionally finished desktop. A simple installation process Software to guide you through your journey Support for the easy installation and use of multiple kernels Hardware Support Calinix only supports 64 bit computers. It might never gain support for ARM and 32-bit systems.","title":"Introduction"},{"location":"introduction/#calinixos","text":"CalinixOS is a power-user-friendly GNU/Linux distribution based on the independently developed Arch Linux. Within the Linux community, Arch itself is renowned for being an exceptionally fast, powerful, and lightweight distribution that provides access to the very latest cutting-edge software. However, Arch is also traditionally aimed at more experienced or technically-minded users as you have to install all your tools step by step writing tons of commands. Shan't be a proble for the power user but is a bit easier. CalinixOS is suitable for intermediate as well as experienced Linux users. For newcomers, a user-friendly installer is provided, and the system itself is designed to work fully\u201cstraight out of the box\u201d with features including: Pre-installed Window Manager with a Simple but Flexible UI representing the OSX-like feel. Pre-installed graphical applications to easily install software and update your system Pre-installed codecs to play multimedia files Performance tweaks out of the box to make your experience super fast","title":"CalinixOS"},{"location":"introduction/#features","text":"Speed, power, and efficiency Access to the very latest cutting- and bleeding-edge software A \u201crolling release\u201d development model that provides the most upto-date system possible without the need to regularly install a new operating system release. Access to the Arch User Repository Software configured for professional users who like a professionally finished desktop. A simple installation process Software to guide you through your journey Support for the easy installation and use of multiple kernels","title":"Features"},{"location":"introduction/#hardware-support","text":"Calinix only supports 64 bit computers. It might never gain support for ARM and 32-bit systems.","title":"Hardware Support"},{"location":"interface/control-center/","text":"The Control Center The Control Center allows you to perform the basic tweaks you would like to do in your OS. The Control Center can be toggled through the icon in the taskbar Usage Usage is pretty simple. Do Not Disturb [DND] If On, The Do Not Disturb feature mutes all alerts and notifications on your device. If Off, The Do Not Disturb feature will stay inactive and you will recieve notifications as usual Airplane Mode When activated, this mode suspends the device's radio-frequency (RF) signal transmission technologies (i.e., Bluetooth , telephony and Wi-Fi ), effectively disabling all analog voice, and digital data services Blur Effects When On, the compositor will force blur the transparent areas of your operating system. For example, your taskbar, terminal, titlebars etc. will get blurred Blur Strength Slider The Blur Strength Slider allows you to adjust the amount of blur you need. It is easily adjustable and very responsive. Here are some screenshots of CalinixOS with different blur effects No Blur Minimal Blur 50% Blur Full Blur Blue Light We use Redshift for our blue light filter. Redshift adjusts the color temperature of your screen according to your surroundings. This may help your eyes hurt less if you are working in front of the screen at night. Redshift changes the color temperature automatically with the time of the day. Bluetooth Bluetooth is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices. In Linux, the canonical implementation of the Bluetooth protocol stack is BlueZ. You can toggle bluetooth on and off with just one click. Brightness Adjust your screen brightness through this slider. Moving the slider right increases brightness and moving it right decreases brightness Brightness is controlled by the light-git application for easily managing brightness levels and display related functions. System Resources In the top right corner of the control center, you will see two buttons. The power button is ofcourse for exiting options, while the left button looking like a CPU toggles the system resources bar which gives you a basic system resource usage overview of your device.","title":"The Control Center"},{"location":"interface/control-center/#the-control-center","text":"The Control Center allows you to perform the basic tweaks you would like to do in your OS. The Control Center can be toggled through the icon in the taskbar","title":"The Control Center"},{"location":"interface/control-center/#usage","text":"Usage is pretty simple.","title":"Usage"},{"location":"interface/control-center/#do-not-disturb-dnd","text":"If On, The Do Not Disturb feature mutes all alerts and notifications on your device. If Off, The Do Not Disturb feature will stay inactive and you will recieve notifications as usual","title":"Do Not Disturb [DND]"},{"location":"interface/control-center/#airplane-mode","text":"When activated, this mode suspends the device's radio-frequency (RF) signal transmission technologies (i.e., Bluetooth , telephony and Wi-Fi ), effectively disabling all analog voice, and digital data services","title":"Airplane Mode"},{"location":"interface/control-center/#blur-effects","text":"When On, the compositor will force blur the transparent areas of your operating system. For example, your taskbar, terminal, titlebars etc. will get blurred","title":"Blur Effects"},{"location":"interface/control-center/#blur-strength-slider","text":"The Blur Strength Slider allows you to adjust the amount of blur you need. It is easily adjustable and very responsive. Here are some screenshots of CalinixOS with different blur effects No Blur Minimal Blur 50% Blur Full Blur","title":"Blur Strength Slider"},{"location":"interface/control-center/#blue-light","text":"We use Redshift for our blue light filter. Redshift adjusts the color temperature of your screen according to your surroundings. This may help your eyes hurt less if you are working in front of the screen at night. Redshift changes the color temperature automatically with the time of the day.","title":"Blue Light"},{"location":"interface/control-center/#bluetooth","text":"Bluetooth is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices. In Linux, the canonical implementation of the Bluetooth protocol stack is BlueZ. You can toggle bluetooth on and off with just one click.","title":"Bluetooth"},{"location":"interface/control-center/#brightness","text":"Adjust your screen brightness through this slider. Moving the slider right increases brightness and moving it right decreases brightness Brightness is controlled by the light-git application for easily managing brightness levels and display related functions.","title":"Brightness"},{"location":"interface/control-center/#system-resources","text":"In the top right corner of the control center, you will see two buttons. The power button is ofcourse for exiting options, while the left button looking like a CPU toggles the system resources bar which gives you a basic system resource usage overview of your device.","title":"System Resources"},{"location":"interface/dock/","text":"The Dock In the CalinixOS UI you will see a dock with several icons and actions below. This section will explain the dock as many people get confused on the dock only. Specially users who were using a DE before Apps do not launch when clicking the dock icons! They won't, because they are not made to. The icons on the dock like that of Visual Studio Code , Firefox , Steam , Nautilus , Terminal etc. The Calinix Dock is a bit different from the usual docks. Those application icons there are not for launching the apps. Instead, they are for workspaces. Each application icon represents the workspace of their utility. For example, the firefox workspace is for browsing. The Terminal Workspace is for terminal related tasks, and so on. Why so many Workspaces? Well it's common in tiling window managers. Workspaces make you do your work faster and better. Specially when you are working with many apps at once. And when you are making use of Tiling, it works out better than you would have expected. Tiling uses the whole screen estate of your monitor, hence after 2-3 applications in one window you would want to shift to another workspace. Or most of the time, instead of using multiple floating windows, you would like using one application per workspace due to the easy navigation through keyboard. You can put the browser on one workspace, the terminal on another, an email client on a third, etc. You can even change the configuration to assign specific applications to particular workspaces and quickly switch between them, which makes workspaces a very useful feature. You can switch workspaces easily, just press Super+<num> to go to workspace <num> .","title":"The Dock"},{"location":"interface/dock/#the-dock","text":"In the CalinixOS UI you will see a dock with several icons and actions below. This section will explain the dock as many people get confused on the dock only. Specially users who were using a DE before","title":"The Dock"},{"location":"interface/dock/#apps-do-not-launch-when-clicking-the-dock-icons","text":"They won't, because they are not made to. The icons on the dock like that of Visual Studio Code , Firefox , Steam , Nautilus , Terminal etc. The Calinix Dock is a bit different from the usual docks. Those application icons there are not for launching the apps. Instead, they are for workspaces. Each application icon represents the workspace of their utility. For example, the firefox workspace is for browsing. The Terminal Workspace is for terminal related tasks, and so on.","title":"Apps do not launch when clicking the dock icons!"},{"location":"interface/dock/#why-so-many-workspaces","text":"Well it's common in tiling window managers. Workspaces make you do your work faster and better. Specially when you are working with many apps at once. And when you are making use of Tiling, it works out better than you would have expected. Tiling uses the whole screen estate of your monitor, hence after 2-3 applications in one window you would want to shift to another workspace. Or most of the time, instead of using multiple floating windows, you would like using one application per workspace due to the easy navigation through keyboard. You can put the browser on one workspace, the terminal on another, an email client on a third, etc. You can even change the configuration to assign specific applications to particular workspaces and quickly switch between them, which makes workspaces a very useful feature. You can switch workspaces easily, just press Super+<num> to go to workspace <num> .","title":"Why so many Workspaces?"},{"location":"interface/the-awesomewm/","text":"About the Awesome Window Manager awesome is a highly configurable, next generation framework window manager for X. It is very fast, extensible and licensed under the GNU GPLv2 license. It is primarily targeted at power users, developers and any people dealing with every day computing tasks and who want to have fine-grained control on their graphical environment. A window manager is probably one of the most used software applications in your day-to-day tasks, along with your web browser, mail reader and text editor. Power users and programmers have a big range of choice between several tools for these day-to-day tasks. Some are heavily extensible and configurable. awesome tries to complete these tools with what we miss: an extensible, highly configurable window manager. To achieve this goal, awesome has been designed as a framework window manager. It's extremely fast, small, dynamic and heavily extensible using the Lua programming language. Features Very stable, fast and small codebase and footprint. First window manager using the asynchronous XCB library instead of the old, synchronous Xlib, which makes - awesome less subject to latency compared to other window managers. Documented source code and API. No mouse needed: everything can be performed with the keyboard. Real multihead support (XRandR) with per screen desktops (tags). Implements many Freedesktop standards: EWMH, XDG Base Directory, XEmbed, Desktop Notification, System Tray. Does not distinguish between layers: there is no floating or tiled layer. Uses tags instead of workspaces: allow to place clients on several tags, and display several tags at the same time. A lot of Lua extensions to add features: dynamic tagging, widget feeding, tabs, layouts, \u2026 D-Bus support. And more. Configuration AwesomeWM is configured in Lua language. Configuring awesomeWM requires you to have some decent knowledge of Lua More Links ArchWiki AwesomeWM Overview The Beginners Guide To The AwesomeWM Windows Manager Awesome Docs","title":"About the Awesome Window Manager"},{"location":"interface/the-awesomewm/#about-the-awesome-window-manager","text":"awesome is a highly configurable, next generation framework window manager for X. It is very fast, extensible and licensed under the GNU GPLv2 license. It is primarily targeted at power users, developers and any people dealing with every day computing tasks and who want to have fine-grained control on their graphical environment. A window manager is probably one of the most used software applications in your day-to-day tasks, along with your web browser, mail reader and text editor. Power users and programmers have a big range of choice between several tools for these day-to-day tasks. Some are heavily extensible and configurable. awesome tries to complete these tools with what we miss: an extensible, highly configurable window manager. To achieve this goal, awesome has been designed as a framework window manager. It's extremely fast, small, dynamic and heavily extensible using the Lua programming language.","title":"About the Awesome Window Manager"},{"location":"interface/the-awesomewm/#features","text":"Very stable, fast and small codebase and footprint. First window manager using the asynchronous XCB library instead of the old, synchronous Xlib, which makes - awesome less subject to latency compared to other window managers. Documented source code and API. No mouse needed: everything can be performed with the keyboard. Real multihead support (XRandR) with per screen desktops (tags). Implements many Freedesktop standards: EWMH, XDG Base Directory, XEmbed, Desktop Notification, System Tray. Does not distinguish between layers: there is no floating or tiled layer. Uses tags instead of workspaces: allow to place clients on several tags, and display several tags at the same time. A lot of Lua extensions to add features: dynamic tagging, widget feeding, tabs, layouts, \u2026 D-Bus support. And more.","title":"Features"},{"location":"interface/the-awesomewm/#configuration","text":"AwesomeWM is configured in Lua language. Configuring awesomeWM requires you to have some decent knowledge of Lua","title":"Configuration"},{"location":"interface/the-awesomewm/#more-links","text":"ArchWiki AwesomeWM Overview The Beginners Guide To The AwesomeWM Windows Manager Awesome Docs","title":"More Links"},{"location":"interface/wm-vs-de/","text":"Window Manager VS Desktop Environment Linux is about choice. Take the graphical user interface (GUI) you use. With Windows and macOS, you're locked into the desktops Microsoft and Apple, respectively, have chosen for you. But with Linux desktop environments, the sky's the limit. We tested the two main ways to customize Linux \u2014 a windows manager and a desktop environment \u2014 to help you choose. There are many ways to customize a Linux environment. Depending on the Linux distribution you use and how tech-savvy you are, you may want a window manager, a desktop environment, or both. What Is a Window Manager? The window manager is responsible for the placement of the windows, how they are arranged on the screen, how they interact with each other, and, up to a point, their appearance. It\u2019s easier to understand what window managers are if you look at their two different subcategories: stacking and tiling. Tiling window managers display the full contents of all active windows next to each other. They split the screen into many smaller parts and place each application in them. Some popular tiling window managers are i3, awesome, bspwm, and Ratpoison. Stacking window managers are the paradigm most people are familiar with and allow windows to float and cover each other. They allow you to move a window around the screen freely, change its size, place two of them next to or over each other, etc. However, the distinction between them isn\u2019t always straightforward. Some tiling window managers may also allow some windows to float freely, move around, and resize. Similarly, modern stacking window managers may also offer functions that help tile windows next to each other. What Is a Desktop Environment? Building on the window manager, the desktop environment adds the final graphic touches to the visual desktop experience. At its base, the desktop environment is responsible for the toolbars, panels, and all the little tools we take for granted when using our desktop. Among them is the clipboard manager, the applets that allow us to control our network connections or move between virtual desktops, etc. Some of the most popular full-blown desktop environments in Linux are Gnome, KDE, and XFCE. A desktop environment also (usually) comes with a suite of apps. A text editor, calendars, process viewers, and, of course, a file manager are among the essential tools that come with most desktop environments. When you realize that a window manager doesn\u2019t come with all of this, the distinction between them and a desktop environment becomes more apparent. Window Managers Pros Way Less memory/CPU usage than most desktop environments Highly configurable Has almost no bundled software with it, totally vanilla with as much less bloat as possible Cons Not as user-friendly if you want to make heavy customizations. Some learning curve Desktop Environments Pros More newbie-friendly Easier to customize Cons Requires more resources Certain desktop environments can feel slow and bloated \u2013 especially on underpowered and older hardware Miss tiling features unless force implemented. Can make you less productive","title":"Window Manager VS Desktop Environment"},{"location":"interface/wm-vs-de/#window-manager-vs-desktop-environment","text":"Linux is about choice. Take the graphical user interface (GUI) you use. With Windows and macOS, you're locked into the desktops Microsoft and Apple, respectively, have chosen for you. But with Linux desktop environments, the sky's the limit. We tested the two main ways to customize Linux \u2014 a windows manager and a desktop environment \u2014 to help you choose. There are many ways to customize a Linux environment. Depending on the Linux distribution you use and how tech-savvy you are, you may want a window manager, a desktop environment, or both.","title":"Window Manager VS Desktop Environment"},{"location":"interface/wm-vs-de/#what-is-a-window-manager","text":"The window manager is responsible for the placement of the windows, how they are arranged on the screen, how they interact with each other, and, up to a point, their appearance. It\u2019s easier to understand what window managers are if you look at their two different subcategories: stacking and tiling. Tiling window managers display the full contents of all active windows next to each other. They split the screen into many smaller parts and place each application in them. Some popular tiling window managers are i3, awesome, bspwm, and Ratpoison. Stacking window managers are the paradigm most people are familiar with and allow windows to float and cover each other. They allow you to move a window around the screen freely, change its size, place two of them next to or over each other, etc. However, the distinction between them isn\u2019t always straightforward. Some tiling window managers may also allow some windows to float freely, move around, and resize. Similarly, modern stacking window managers may also offer functions that help tile windows next to each other.","title":"What Is a Window Manager?"},{"location":"interface/wm-vs-de/#what-is-a-desktop-environment","text":"Building on the window manager, the desktop environment adds the final graphic touches to the visual desktop experience. At its base, the desktop environment is responsible for the toolbars, panels, and all the little tools we take for granted when using our desktop. Among them is the clipboard manager, the applets that allow us to control our network connections or move between virtual desktops, etc. Some of the most popular full-blown desktop environments in Linux are Gnome, KDE, and XFCE. A desktop environment also (usually) comes with a suite of apps. A text editor, calendars, process viewers, and, of course, a file manager are among the essential tools that come with most desktop environments. When you realize that a window manager doesn\u2019t come with all of this, the distinction between them and a desktop environment becomes more apparent.","title":"What Is a Desktop Environment?"},{"location":"interface/wm-vs-de/#window-managers","text":"","title":"Window Managers"},{"location":"interface/wm-vs-de/#pros","text":"Way Less memory/CPU usage than most desktop environments Highly configurable Has almost no bundled software with it, totally vanilla with as much less bloat as possible","title":"Pros"},{"location":"interface/wm-vs-de/#cons","text":"Not as user-friendly if you want to make heavy customizations. Some learning curve","title":"Cons"},{"location":"interface/wm-vs-de/#desktop-environments","text":"","title":"Desktop Environments"},{"location":"interface/wm-vs-de/#pros_1","text":"More newbie-friendly Easier to customize","title":"Pros"},{"location":"interface/wm-vs-de/#cons_1","text":"Requires more resources Certain desktop environments can feel slow and bloated \u2013 especially on underpowered and older hardware Miss tiling features unless force implemented. Can make you less productive","title":"Cons"},{"location":"software/aur/","text":"A Beginner's Guide to the Arch User Repository Though using an Arch-based distro was pretty straightforward for a seasoned user, there is one striking difference that I felt contrasting with the Debian-like environment: the Arch User Repository . This is because Arch Linux separates the official project packages from the software that is contributed by the users themselves in another place completely - thus being called Arch User Repository (AUR). Unlike other distros, however, Arch does not even include them in the reach of your package manager . In Debian or Ubuntu, you might edit /etc/apt/sources.list to add nonfree or \"universe\" repositories or PPAs, and after a cache update, all these packages are automatically manageable from apt. Not so with Arch - the AUR is off-limits to pacman , and you must install software from there in a more \"manual\" way, which confuses many beginners used to a more automatic method. It took me some time to finally get the way installing from the AUR works, not because it's complicated, but rather because I chose to avoid the unknown until I had no choice. And much like the rest of my experience with Arch, it also turned out to be quite easy, even without helpers (yay, yaourt, paru, etc). That's why I'm summarizing the important findings in this point, so that other beginners may not fear the AUR and learn quickly how to install from there. Read on! How AUR works The single largest difference between installing stuff from AUR versus contribution repositories in other distros is this: AUR does not store binary precompiled packages in a server somewhere - you have to build them by yourself . This is strikingly different from, for example, what you see in Debian. There, you download binaries from the repository server, verify the signature to see if it matches the maintainer's, and if all looks good, copy the binaries into their respective places. Finito. With the AUR, that process is almost reversed, following a build process that resembles that of source-based distributions. If you look at it from a purely quantitative perspective, the AUR is a much larger repository than the official Arch packages, and this explains why so many times when you search for something via pacman -Ss package , you'll find nothing, with the answer on the wiki being \"you can install it from the AUR.\" This is especially true when it comes to games: Arch has a myriad of them, arguably larger than any other distro, but few make it to the official repos. Once again, AUR is the answer. The overall install process has four major steps that thankfully can be mostly automated using Arch's tools: Clone the AUR git repository of your desired package. Follow the build instructions of the git repo's PKGBUILD file. Install additional dependencies via pacman. Build from source and install the package via pacman. These steps might sound familiar to you if you've ever compiled a package from the source code on Linux (see my video on SC-IM for an example), and that's because it's exactly what you're doing here. However, unlike the traditional way of building from source, using the AUR allows you to more or less automate most of that process, which greatly facilitates it. That build process also makes use of a \"feigned\" root environment, that makes it unnecessary to run it as the root user (a-la sudo make install), but requires you to install the fakeroot package first: sudo pacman -S fakeroot Let's look at the process more closely now: Installing from AUR Your starting point to install anything from the AUR is to search for the package you want at the AUR database . You have to use your browser for this, as pacman does not search the AUR with the -Ss flag. As you do so, take note of the status and other health indicators of the package; packages in the AUR are not part of the official distribution, and therefore do not get screened for quality or security. Is the package orphaned? Abandoned? Gets regular updates? Do the comments state build errors or difficulties? The more popular packages usually do not suffer from these problems, but it's good to check regardless. Once you decided on the package to install, find its Git repository link and clone it in the terminal. It's presented on the https://aur.archlinux.org/package-name.git format. git clone https://aur.archlinux.org/package-name.git cd package-name/ You'll find that usually the only thing inside the cloned directory is a script named PKGBUILD. This is the \"instructions\" on all the steps required to build that package, all the way from installing dependencies, downloading external assets, and compiler flags. Think of it as a Makefile on steroids, which is great since the next step is to simply run the following command to build and install the package: makepkg -si And that's pretty much it. makepkg does its magic handling all the dependencies and compilation for you (it might ask you to install things via pacman along the way), using fakeroot to abstract parts that would require root permissions to proceed. If you find errors along the way (ie. with the configure script), read them and try to understand what dependencies are missing, and fill in those gaps with pacman. Usually after this the build is pretty smooth. Be warned, though, that since you're compiling everything, it will take much more time compared to pacman. Depending on the package size and your CPU, the build could take anywhere between a few minutes to about an hour. Gentoo users might be used to it, but most others will be quite surprised. Once the package is built, pacman will offer to install it neatly alongside your other system binaries. Enter your password and that's pretty much it - you have installed your first AUR package! Using helpers As seen in this rather simple guide, using the AUR is not at all a hard task once you know how it works behind the scenes. However, it's still not as convenient as having a package manager to search for install and update packages with short, simple commands. Could there be a way to use the AUR in a similar manner? Surprisingly, there are a few, called AUR helpers . A helper program takes the same (or similar) syntax as pacman and abstracts the work described above to provide an experience similar to using pacman itself. There are still a few caveats that the helpers can't cover completely, and the official way to install from the AUR according to the Arch Linux Project remains the manual process described above. But if you take these in consideration, it's still a very convenient way to use the AUR. For the longest time, a program called yaourt was the go-to helper in Arch Linux. It was, however, deprecated due to lack of maintenance sometime in the mid 2010s, and a spiritual successor called yay became the next recommended helper. However, yay itself became deprecated by the end of 2019 due to lack of maintenance, and a few other alternatives came along (I hear that paru is the new successor to yay). This anecdote illustrates one important limitation of helpers: they are as useful as they are maintained. Because they are not an official part of Arch, the project does not maintain them, and they rely on volunteers to keep evolving together with Arch itself. Using a slightly old helper might not be a problem in the short term, but it might stop working as it falls behind the rolling releases. Keep this in mind as you choose which helper to use. As they're not part of of Arch Linux, helpers must (not ironically) also be built and installed from the AUR. As we saw before, though, that is not a problem: just follow the same process to build the package manually with git and once you're done, the helper will be available to you, in parallel to pacman. A full listing comparing all AUR helper programs is available at the Arch Wiki. Conclusion The Arch User Repository is a real treasure trove of community-maintained software that is usually very up-to-date with upstream releases, but requires a slightly different process to install from. Thankfully, it's not complicated, but might require a little more time since it's always built from source. AUR is not without its warts either, and less popular packages might fall behind in terms of quality or even security, and you should always keep this in mind as you install software from it. You can use helper programs (yay, paru, etc) to ease and speed up the build process when installing from the AUR, but keep in mind their limitations and that the official way to install is still manually. If you reckon all of these, the AUR is a terrific tool and a source of a myriad of packages, some of which are not even available in other distributions. Notes This was an edited article from Klaus Zimmerman's article","title":"A Beginner's Guide to the Arch User Repository"},{"location":"software/aur/#a-beginners-guide-to-the-arch-user-repository","text":"Though using an Arch-based distro was pretty straightforward for a seasoned user, there is one striking difference that I felt contrasting with the Debian-like environment: the Arch User Repository . This is because Arch Linux separates the official project packages from the software that is contributed by the users themselves in another place completely - thus being called Arch User Repository (AUR). Unlike other distros, however, Arch does not even include them in the reach of your package manager . In Debian or Ubuntu, you might edit /etc/apt/sources.list to add nonfree or \"universe\" repositories or PPAs, and after a cache update, all these packages are automatically manageable from apt. Not so with Arch - the AUR is off-limits to pacman , and you must install software from there in a more \"manual\" way, which confuses many beginners used to a more automatic method. It took me some time to finally get the way installing from the AUR works, not because it's complicated, but rather because I chose to avoid the unknown until I had no choice. And much like the rest of my experience with Arch, it also turned out to be quite easy, even without helpers (yay, yaourt, paru, etc). That's why I'm summarizing the important findings in this point, so that other beginners may not fear the AUR and learn quickly how to install from there. Read on!","title":"A Beginner's Guide to the Arch User Repository"},{"location":"software/aur/#how-aur-works","text":"The single largest difference between installing stuff from AUR versus contribution repositories in other distros is this: AUR does not store binary precompiled packages in a server somewhere - you have to build them by yourself . This is strikingly different from, for example, what you see in Debian. There, you download binaries from the repository server, verify the signature to see if it matches the maintainer's, and if all looks good, copy the binaries into their respective places. Finito. With the AUR, that process is almost reversed, following a build process that resembles that of source-based distributions. If you look at it from a purely quantitative perspective, the AUR is a much larger repository than the official Arch packages, and this explains why so many times when you search for something via pacman -Ss package , you'll find nothing, with the answer on the wiki being \"you can install it from the AUR.\" This is especially true when it comes to games: Arch has a myriad of them, arguably larger than any other distro, but few make it to the official repos. Once again, AUR is the answer. The overall install process has four major steps that thankfully can be mostly automated using Arch's tools: Clone the AUR git repository of your desired package. Follow the build instructions of the git repo's PKGBUILD file. Install additional dependencies via pacman. Build from source and install the package via pacman. These steps might sound familiar to you if you've ever compiled a package from the source code on Linux (see my video on SC-IM for an example), and that's because it's exactly what you're doing here. However, unlike the traditional way of building from source, using the AUR allows you to more or less automate most of that process, which greatly facilitates it. That build process also makes use of a \"feigned\" root environment, that makes it unnecessary to run it as the root user (a-la sudo make install), but requires you to install the fakeroot package first: sudo pacman -S fakeroot Let's look at the process more closely now:","title":"How AUR works"},{"location":"software/aur/#installing-from-aur","text":"Your starting point to install anything from the AUR is to search for the package you want at the AUR database . You have to use your browser for this, as pacman does not search the AUR with the -Ss flag. As you do so, take note of the status and other health indicators of the package; packages in the AUR are not part of the official distribution, and therefore do not get screened for quality or security. Is the package orphaned? Abandoned? Gets regular updates? Do the comments state build errors or difficulties? The more popular packages usually do not suffer from these problems, but it's good to check regardless. Once you decided on the package to install, find its Git repository link and clone it in the terminal. It's presented on the https://aur.archlinux.org/package-name.git format. git clone https://aur.archlinux.org/package-name.git cd package-name/ You'll find that usually the only thing inside the cloned directory is a script named PKGBUILD. This is the \"instructions\" on all the steps required to build that package, all the way from installing dependencies, downloading external assets, and compiler flags. Think of it as a Makefile on steroids, which is great since the next step is to simply run the following command to build and install the package: makepkg -si And that's pretty much it. makepkg does its magic handling all the dependencies and compilation for you (it might ask you to install things via pacman along the way), using fakeroot to abstract parts that would require root permissions to proceed. If you find errors along the way (ie. with the configure script), read them and try to understand what dependencies are missing, and fill in those gaps with pacman. Usually after this the build is pretty smooth. Be warned, though, that since you're compiling everything, it will take much more time compared to pacman. Depending on the package size and your CPU, the build could take anywhere between a few minutes to about an hour. Gentoo users might be used to it, but most others will be quite surprised. Once the package is built, pacman will offer to install it neatly alongside your other system binaries. Enter your password and that's pretty much it - you have installed your first AUR package!","title":"Installing from AUR"},{"location":"software/aur/#using-helpers","text":"As seen in this rather simple guide, using the AUR is not at all a hard task once you know how it works behind the scenes. However, it's still not as convenient as having a package manager to search for install and update packages with short, simple commands. Could there be a way to use the AUR in a similar manner? Surprisingly, there are a few, called AUR helpers . A helper program takes the same (or similar) syntax as pacman and abstracts the work described above to provide an experience similar to using pacman itself. There are still a few caveats that the helpers can't cover completely, and the official way to install from the AUR according to the Arch Linux Project remains the manual process described above. But if you take these in consideration, it's still a very convenient way to use the AUR. For the longest time, a program called yaourt was the go-to helper in Arch Linux. It was, however, deprecated due to lack of maintenance sometime in the mid 2010s, and a spiritual successor called yay became the next recommended helper. However, yay itself became deprecated by the end of 2019 due to lack of maintenance, and a few other alternatives came along (I hear that paru is the new successor to yay). This anecdote illustrates one important limitation of helpers: they are as useful as they are maintained. Because they are not an official part of Arch, the project does not maintain them, and they rely on volunteers to keep evolving together with Arch itself. Using a slightly old helper might not be a problem in the short term, but it might stop working as it falls behind the rolling releases. Keep this in mind as you choose which helper to use. As they're not part of of Arch Linux, helpers must (not ironically) also be built and installed from the AUR. As we saw before, though, that is not a problem: just follow the same process to build the package manually with git and once you're done, the helper will be available to you, in parallel to pacman. A full listing comparing all AUR helper programs is available at the Arch Wiki.","title":"Using helpers"},{"location":"software/aur/#conclusion","text":"The Arch User Repository is a real treasure trove of community-maintained software that is usually very up-to-date with upstream releases, but requires a slightly different process to install from. Thankfully, it's not complicated, but might require a little more time since it's always built from source. AUR is not without its warts either, and less popular packages might fall behind in terms of quality or even security, and you should always keep this in mind as you install software from it. You can use helper programs (yay, paru, etc) to ease and speed up the build process when installing from the AUR, but keep in mind their limitations and that the official way to install is still manually. If you reckon all of these, the AUR is a terrific tool and a source of a myriad of packages, some of which are not even available in other distributions.","title":"Conclusion"},{"location":"software/aur/#notes","text":"This was an edited article from Klaus Zimmerman's article","title":"Notes"},{"location":"software/fonts/","text":"Adding new fonts in CalinixOS CalinixOS pre-installs several basic fonts by default. This page explains how to add new fonts to a CalinixOS installation. Packaged fonts Did you know CalinixOS packages several freely-licensed fonts? There are several supplementary fonts to preview and try out that are not installed by default. Like all fonts on CalinixOS, these fonts are not encumbered with licenses or restrictions. An added benefit of packaged fonts is they give you control over the font package in the future. You will receive future updates and can easily uninstall it later if you decide it is not the font for you. If you prefer working in a C.L.I., you can install fonts with yay . List all available font packages from enabled repositories yay font Install the font package you need by selecting them. Unpackaged fonts In many cases, you may want to use a specific font that is not available in CalinixOS or is not made available under Free Culture licenses. Unpackaged fonts are not managed by a package manager. You will not automatically receive updates or optimizations. If a font is provided by a distribution package, you should always use a packaged version of a font. System fonts System fonts are installed for all users. Anyone with an account on the machine will be able to use these fonts. Create a new directory /usr/share/fonts/<font-family-name>/ for the new font family sudo mkdir /usr/share/fonts/robofont Copy font files (e.g. .ttf files) to the new directory sudo cp ~/Downloads/robofont.ttf /usr/share/fonts/robofont Update the font cache sudo fc-cache -v User fonts User fonts are installed for an individual user. Only the user who installs the fonts on the machine will be able to use these fonts. This is also convenient if you do not have superuser (i.e. root ) access on the machine. If you prefer a command line interface, you can install user fonts manually. Follow these steps in a terminal window to install a font locally: Create a new directory ~/.local/share/fonts/<font-family-name>/ for the new font family mkdir -p ~/.local/share/fonts/robofont Copy font files (e.g. .ttf files) to the new directory cp ~/Downloads/robofont.ttf ~/.local/share/fonts/robofont Update the font cache fc-cache -v","title":"Adding new fonts in CalinixOS"},{"location":"software/fonts/#adding-new-fonts-in-calinixos","text":"CalinixOS pre-installs several basic fonts by default. This page explains how to add new fonts to a CalinixOS installation.","title":"Adding new fonts in CalinixOS"},{"location":"software/fonts/#packaged-fonts","text":"Did you know CalinixOS packages several freely-licensed fonts? There are several supplementary fonts to preview and try out that are not installed by default. Like all fonts on CalinixOS, these fonts are not encumbered with licenses or restrictions. An added benefit of packaged fonts is they give you control over the font package in the future. You will receive future updates and can easily uninstall it later if you decide it is not the font for you. If you prefer working in a C.L.I., you can install fonts with yay . List all available font packages from enabled repositories yay font Install the font package you need by selecting them.","title":"Packaged fonts"},{"location":"software/fonts/#unpackaged-fonts","text":"In many cases, you may want to use a specific font that is not available in CalinixOS or is not made available under Free Culture licenses. Unpackaged fonts are not managed by a package manager. You will not automatically receive updates or optimizations. If a font is provided by a distribution package, you should always use a packaged version of a font.","title":"Unpackaged fonts"},{"location":"software/fonts/#system-fonts","text":"System fonts are installed for all users. Anyone with an account on the machine will be able to use these fonts. Create a new directory /usr/share/fonts/<font-family-name>/ for the new font family sudo mkdir /usr/share/fonts/robofont Copy font files (e.g. .ttf files) to the new directory sudo cp ~/Downloads/robofont.ttf /usr/share/fonts/robofont Update the font cache sudo fc-cache -v","title":"System fonts"},{"location":"software/fonts/#user-fonts","text":"User fonts are installed for an individual user. Only the user who installs the fonts on the machine will be able to use these fonts. This is also convenient if you do not have superuser (i.e. root ) access on the machine. If you prefer a command line interface, you can install user fonts manually. Follow these steps in a terminal window to install a font locally: Create a new directory ~/.local/share/fonts/<font-family-name>/ for the new font family mkdir -p ~/.local/share/fonts/robofont Copy font files (e.g. .ttf files) to the new directory cp ~/Downloads/robofont.ttf ~/.local/share/fonts/robofont Update the font cache fc-cache -v","title":"User fonts"},{"location":"software/installm/","text":"Finding and installing Linux applications Many powerful software applications are available on the Linux operating system. You can find alternatives to most of the popular applications used on other systems. You can use the CalinixOS package management system to install applications. Most essential applications are available from the repositories provided by chaotic-aur, arcolinux, arch linux and Calinix project. You can enable other repositories to get additional applications. Package management in CalinixOS Like most modern Linux distributions, CalinixOS uses a package management system. Package management tools automate installation, upgrading, and removing of software applications and components. Each application or component is defined as a package . When the package is installed, all code, configuration, and other files are deployed on the system. A single package is not necessarily the same as an application. Some applications can be shipped as several packages. Moreover, shared code (libraries) in Linux is normally shipped as separate packages, while in other systems applications often ship their own versions of required libraries and install them if necessary. File placement The package management tools track which files on your CalinixOS installation belong to each package; normally, every file that is installed in the /usr tree as well as most configuration files under /etc are installed by one of the packages. When installing a package, the package management system verifies its integrity; if any files are missing or corrupted, the package is not installed. Resolving dependencies The package management system also tracks all dependencies between the packages. For example, if an application requires some libraries, the package for this application lists the libraries as dependencies. When you install the application package, the package management tools automatically install the library packages. If a dependency is not available, the tools do not install the package, so you can avoid a sudden malfunction. When you want to remove a package, package management tools cleanly delete all code files for this package without affecting other packages. By default, configuration files are not removed, so you can install the package again and keep the configuration that you have set up earlier. Updating packages Updating any package is entirely automatic with the package management system. The system replaces all the necessary code files and preserves existing configuration. In fact, for most Linux distributions, including CalinixOS, all of the system installation except the earliest part is performed by installing various packages. Security updates and upgrades to a next release are performed entirely by package management tools. Repositories To get packages, Pacman uses repositories . A repository is an organized collection of packages. Repositories can be kept on any data media; notably, the CalinixOS installation image contains a repository. However, most up-to-date repositories are normally maintained online. Each CalinixOS release has an official calinix repository and few other repositories like the chaotic-aur repository (which contains pre-built packages from the Arch User Repository), ArcoLinux 3rd party and ArcoLinux X-Large repositories (which again contain a large number of software outside the official Arch Linux repositories and are maintained regularly). And ofcourse the Arch Linux Repositories which make Calinix very close to actual Arch Linux when it comes to software release scheme. In these repositories, you can find almost any Linux software. Installing from source code While many Linux applications can be built and installed from from source code, using such builds can make your system much harder to manage. For example, automatic updates to system packages (especially when updating to the next release) might impact an application that was installed from source. And, of course, no automatic security updates are available for the application. So we do not recommend building software from source code if you are not in for the hassle. You will find many software in the repositories and almost any software in the AUR , Flatpak or Snap . Other installation methods Sometimes you might need to install software using other package management systems. Notably: CPAN for libraries for the Perl language PyPI for libraries (and sometimes applications) for the Python language Commercial repositories for games Go for Golang-written applications However, installing applications using the CalinixOS package management systems is the preferred option. Searching for Linux software alternatives on the Web To complete your tasks on a Linux system, you need to find the software applications that fit your needs. If you are switching from another operating system, you might need to find replacements for the software that you used before. Most applications available on Linux are open-source software. You can use open-source software without acquiring any licenses. Moreover, widespread open-source software is usually available in the official CalinixOS repository, so you can install it easily. Procedure Access the following websites to review Linux alternatives to popular software packages: https://linuxappfinder.com/alternatives https://www.linuxalt.com/ https://opensource.com/alternatives https://www.osalt.com/ https://alternativeto.net/ Browsing and installing software through GUI Since CalinixOS is based on Arch Linux , most of this tutorial can also be used for Arch Linux and its derivatives. The methods will be listed from easiest to more advanced. Using the Pamac graphical software manager tool Using pacman GUI front-end Octopi Using pacman commands Using yay AUR helper to install software from Arch User Repository I am also adding several tricks to make things easier. Method 1: Install and Remove Software in CalinixOS with Pamac Here, we\u2019ll be using Pamac to install/remove software in Calinix. Install Software in CalinixOS with Pamac Pacman is the package manager created by the Arch team and used by Calinix. This is probably the easiest way to install the software. We will cover it in depth later on. Right now, we focus on Pamac. Pamac is a graphical application created to make Pacman easy to use. Like synaptic for apt. You can either access Pamac by launching \u201c Add/Remove Software \u201d from the app menu (Launched by Super+R) You can also launch the Software Manager Pamac allows you to view software already installed, search for new software by name or by category. If you don\u2019t find something you search for, you can also look for it in the Arch User Repository (AUR) . Your application will not be installed until you click \u201c Apply \u201d. You will be prompted to enter your password and after showing you a list of files it will download it will go to work. It\u2019s optional to click the \u201c right arrow \u201d next to the \u201c Apply \u201d button to see the terminal output. Enabling AUR and Snap/Flatpak support in Pamac Enabling the AUR and Snap or Flatpak support takes a couple of extra steps in Pamac. Click the 3 dotted menu in the upper right corner and select \u201cPreferences\u201d. You will be prompted to enter your password. Now, select the \u201cAUR\u201d tab. Now flip the switch (toggle it on). Now, you will be able to install software from the AUR and keep them up-to-date. Similarly, you can just head to the Snap and Flatpak options to \u201c Enable Snap support \u201d and \u201c Enable Flatpak support \u201d if you need. Remove Software in CalinixOS with Pamac Removing software using Pamac is as easy as installing it. All you have to do just click on the \u201cremove\u201d button on the right side of the screen. Once you selected all the packages you want to remove, click on \u201capply\u201d button. Method 2: Install and Remove Software in CalinixOS with Pacman command Graphical applications are easy to use for beginners, but terminal or command line programs are more powerful and faster. Install Software in CalinixOS with pacman As I stated above, Pacman is the command line package manager for Arch based distros. To install an application, all you have to do is enter sudo pacman -S PACKAGENAME . Just replace PACKAGENAME with the name of the application that you want to install. You will be prompted to enter your password. Once you enter it, your application will be downloaded and installed. Pacman Installation You can also install a group of packages such a GNOME using this command: sudo pacman -S gnome It\u2019s that easy! Remove Software in CalinixOS with pacman Removing software with Pacman is just as easy. All you have to do is enter the following command: sudo pacman -R PACKAGENAME Just replace PACKAGENAME with the name of the package you want to remove. Pacman Uninstallation Tips to Improve Pacman Experience Since it\u2019s a terminal application, Pacman can run pretty quickly, Unfortunately, the process can be slowed down by a bad mirror . You can use this command to rank mirrors by speed and remove out of date mirrors: pacman-mirrors -g When that is finished you will need to sync the Pacman database with this command: sudo pacman -Syy You may learn more about using pacman command for package management in Arch-based distributions in our detailed guide. Method 4: Install and Remove Software in CalinixOS with yay While you can\u2019t install an application from the AUR using Pacman, there are a number of terminal programs that allow you to do just that. One of the most well-known examples is yay . Install Software in CalinixOS with yay You can install packages from both official repository and AUR. You first need to install yay on your machine. To do this, type in the commands below: git clone https://aur.archlinux.org/yay.git cd yay makepkg -si One nice thing about yay is that it gives you the ability to search for the application you want to install, all you have to do is use this command: yay -S PACKAGENAME Don\u2019t forget to replace PACKAGENAME with the name of the application you are looking for. Yay Installation You will be prompted to enter \u201cy\u201d to continue. You will be prompted to enter your password and asked a couple more questions verifying that you want to install this application. Depending on how large the file is and how much work \u201cyay\u201d has to do to prepare the file, the install may be finished quickly or take a while to complete. Remove Software in CalinixOS with yay To remove an AUR application with yay, just use the following command: yay -R PACKAGENAME","title":"Finding and installing Linux applications"},{"location":"software/installm/#finding-and-installing-linux-applications","text":"Many powerful software applications are available on the Linux operating system. You can find alternatives to most of the popular applications used on other systems. You can use the CalinixOS package management system to install applications. Most essential applications are available from the repositories provided by chaotic-aur, arcolinux, arch linux and Calinix project. You can enable other repositories to get additional applications.","title":"Finding and installing Linux applications"},{"location":"software/installm/#package-management-in-calinixos","text":"Like most modern Linux distributions, CalinixOS uses a package management system. Package management tools automate installation, upgrading, and removing of software applications and components. Each application or component is defined as a package . When the package is installed, all code, configuration, and other files are deployed on the system. A single package is not necessarily the same as an application. Some applications can be shipped as several packages. Moreover, shared code (libraries) in Linux is normally shipped as separate packages, while in other systems applications often ship their own versions of required libraries and install them if necessary.","title":"Package management in CalinixOS"},{"location":"software/installm/#file-placement","text":"The package management tools track which files on your CalinixOS installation belong to each package; normally, every file that is installed in the /usr tree as well as most configuration files under /etc are installed by one of the packages. When installing a package, the package management system verifies its integrity; if any files are missing or corrupted, the package is not installed.","title":"File placement"},{"location":"software/installm/#resolving-dependencies","text":"The package management system also tracks all dependencies between the packages. For example, if an application requires some libraries, the package for this application lists the libraries as dependencies. When you install the application package, the package management tools automatically install the library packages. If a dependency is not available, the tools do not install the package, so you can avoid a sudden malfunction. When you want to remove a package, package management tools cleanly delete all code files for this package without affecting other packages. By default, configuration files are not removed, so you can install the package again and keep the configuration that you have set up earlier.","title":"Resolving dependencies"},{"location":"software/installm/#updating-packages","text":"Updating any package is entirely automatic with the package management system. The system replaces all the necessary code files and preserves existing configuration. In fact, for most Linux distributions, including CalinixOS, all of the system installation except the earliest part is performed by installing various packages. Security updates and upgrades to a next release are performed entirely by package management tools.","title":"Updating packages"},{"location":"software/installm/#repositories","text":"To get packages, Pacman uses repositories . A repository is an organized collection of packages. Repositories can be kept on any data media; notably, the CalinixOS installation image contains a repository. However, most up-to-date repositories are normally maintained online. Each CalinixOS release has an official calinix repository and few other repositories like the chaotic-aur repository (which contains pre-built packages from the Arch User Repository), ArcoLinux 3rd party and ArcoLinux X-Large repositories (which again contain a large number of software outside the official Arch Linux repositories and are maintained regularly). And ofcourse the Arch Linux Repositories which make Calinix very close to actual Arch Linux when it comes to software release scheme. In these repositories, you can find almost any Linux software.","title":"Repositories"},{"location":"software/installm/#installing-from-source-code","text":"While many Linux applications can be built and installed from from source code, using such builds can make your system much harder to manage. For example, automatic updates to system packages (especially when updating to the next release) might impact an application that was installed from source. And, of course, no automatic security updates are available for the application. So we do not recommend building software from source code if you are not in for the hassle. You will find many software in the repositories and almost any software in the AUR , Flatpak or Snap .","title":"Installing from source code"},{"location":"software/installm/#other-installation-methods","text":"Sometimes you might need to install software using other package management systems. Notably: CPAN for libraries for the Perl language PyPI for libraries (and sometimes applications) for the Python language Commercial repositories for games Go for Golang-written applications However, installing applications using the CalinixOS package management systems is the preferred option.","title":"Other installation methods"},{"location":"software/installm/#searching-for-linux-software-alternatives-on-the-web","text":"To complete your tasks on a Linux system, you need to find the software applications that fit your needs. If you are switching from another operating system, you might need to find replacements for the software that you used before. Most applications available on Linux are open-source software. You can use open-source software without acquiring any licenses. Moreover, widespread open-source software is usually available in the official CalinixOS repository, so you can install it easily. Procedure Access the following websites to review Linux alternatives to popular software packages: https://linuxappfinder.com/alternatives https://www.linuxalt.com/ https://opensource.com/alternatives https://www.osalt.com/ https://alternativeto.net/","title":"Searching for Linux software alternatives on the Web"},{"location":"software/installm/#browsing-and-installing-software-through-gui","text":"Since CalinixOS is based on Arch Linux , most of this tutorial can also be used for Arch Linux and its derivatives. The methods will be listed from easiest to more advanced. Using the Pamac graphical software manager tool Using pacman GUI front-end Octopi Using pacman commands Using yay AUR helper to install software from Arch User Repository I am also adding several tricks to make things easier.","title":"Browsing and installing software through GUI"},{"location":"software/installm/#method-1-install-and-remove-software-in-calinixos-with-pamac","text":"Here, we\u2019ll be using Pamac to install/remove software in Calinix.","title":"Method 1: Install and Remove Software in CalinixOS with Pamac"},{"location":"software/installm/#install-software-in-calinixos-with-pamac","text":"Pacman is the package manager created by the Arch team and used by Calinix. This is probably the easiest way to install the software. We will cover it in depth later on. Right now, we focus on Pamac. Pamac is a graphical application created to make Pacman easy to use. Like synaptic for apt. You can either access Pamac by launching \u201c Add/Remove Software \u201d from the app menu (Launched by Super+R) You can also launch the Software Manager Pamac allows you to view software already installed, search for new software by name or by category. If you don\u2019t find something you search for, you can also look for it in the Arch User Repository (AUR) . Your application will not be installed until you click \u201c Apply \u201d. You will be prompted to enter your password and after showing you a list of files it will download it will go to work. It\u2019s optional to click the \u201c right arrow \u201d next to the \u201c Apply \u201d button to see the terminal output.","title":"Install Software in CalinixOS with Pamac"},{"location":"software/installm/#enabling-aur-and-snapflatpak-support-in-pamac","text":"Enabling the AUR and Snap or Flatpak support takes a couple of extra steps in Pamac. Click the 3 dotted menu in the upper right corner and select \u201cPreferences\u201d. You will be prompted to enter your password. Now, select the \u201cAUR\u201d tab. Now flip the switch (toggle it on). Now, you will be able to install software from the AUR and keep them up-to-date. Similarly, you can just head to the Snap and Flatpak options to \u201c Enable Snap support \u201d and \u201c Enable Flatpak support \u201d if you need.","title":"Enabling AUR and Snap/Flatpak support in Pamac"},{"location":"software/installm/#remove-software-in-calinixos-with-pamac","text":"Removing software using Pamac is as easy as installing it. All you have to do just click on the \u201cremove\u201d button on the right side of the screen. Once you selected all the packages you want to remove, click on \u201capply\u201d button.","title":"Remove Software in CalinixOS with Pamac"},{"location":"software/installm/#method-2-install-and-remove-software-in-calinixos-with-pacman-command","text":"Graphical applications are easy to use for beginners, but terminal or command line programs are more powerful and faster.","title":"Method 2: Install and Remove Software in CalinixOS with Pacman command"},{"location":"software/installm/#install-software-in-calinixos-with-pacman","text":"As I stated above, Pacman is the command line package manager for Arch based distros. To install an application, all you have to do is enter sudo pacman -S PACKAGENAME . Just replace PACKAGENAME with the name of the application that you want to install. You will be prompted to enter your password. Once you enter it, your application will be downloaded and installed. Pacman Installation You can also install a group of packages such a GNOME using this command: sudo pacman -S gnome It\u2019s that easy!","title":"Install Software in CalinixOS with pacman"},{"location":"software/installm/#remove-software-in-calinixos-with-pacman","text":"Removing software with Pacman is just as easy. All you have to do is enter the following command: sudo pacman -R PACKAGENAME Just replace PACKAGENAME with the name of the package you want to remove. Pacman Uninstallation","title":"Remove Software in CalinixOS with pacman"},{"location":"software/installm/#tips-to-improve-pacman-experience","text":"Since it\u2019s a terminal application, Pacman can run pretty quickly, Unfortunately, the process can be slowed down by a bad mirror . You can use this command to rank mirrors by speed and remove out of date mirrors: pacman-mirrors -g When that is finished you will need to sync the Pacman database with this command: sudo pacman -Syy You may learn more about using pacman command for package management in Arch-based distributions in our detailed guide.","title":"Tips to Improve Pacman Experience"},{"location":"software/installm/#method-4-install-and-remove-software-in-calinixos-with-yay","text":"While you can\u2019t install an application from the AUR using Pacman, there are a number of terminal programs that allow you to do just that. One of the most well-known examples is yay .","title":"Method 4: Install and Remove Software in CalinixOS with yay"},{"location":"software/installm/#install-software-in-calinixos-with-yay","text":"You can install packages from both official repository and AUR. You first need to install yay on your machine. To do this, type in the commands below: git clone https://aur.archlinux.org/yay.git cd yay makepkg -si One nice thing about yay is that it gives you the ability to search for the application you want to install, all you have to do is use this command: yay -S PACKAGENAME Don\u2019t forget to replace PACKAGENAME with the name of the application you are looking for. Yay Installation You will be prompted to enter \u201cy\u201d to continue. You will be prompted to enter your password and asked a couple more questions verifying that you want to install this application. Depending on how large the file is and how much work \u201cyay\u201d has to do to prepare the file, the install may be finished quickly or take a while to complete.","title":"Install Software in CalinixOS with yay"},{"location":"software/installm/#remove-software-in-calinixos-with-yay","text":"To remove an AUR application with yay, just use the following command: yay -R PACKAGENAME","title":"Remove Software in CalinixOS with yay"},{"location":"software/pkgmngsys/","text":"Package Management System Introduction CalinixOS is a distribution that uses a package management system. This system is based on the Arch Linux Package Management System , with the pacman Package Manager and with several higher level tools built on top of it, most notably Pamac (default gui). CalinixOS comes with yay preinstalled which is an AUR Helper . Know more about the AUR/Arch User Repository Advantages of package management systems Package management systems have many advantages: It\u2019s easy to query what version of a package is installed or available. It\u2019s easy to remove a package entirely, making sure all its files are gone. It\u2019s easy to verify the integrity of the packages files, so you can see if it\u2019s been corrupted or tampered with. It\u2019s easy to upgrade a package by installing the new version and removing all the old versions files. This will make sure not to leave any lingering files from the old package around to confuse or break things. It\u2019s easy to see what packages require or provide things that other packages provide or require, so you can be sure to have the needed items for the package to function correctly. It\u2019s easy to install or remove groups of packages. In many cases it\u2019s possible to downgrade back to a previous version of a package, for example when a new version has a bug. Disadvantages of package management systems You are restricted to either using the versions of the package that are available or having to make your own package if you need a different version. Preferred search order for a software If some software is missing in your installation then you should try the following steps to get the packaged version: Search in Calinix ( 'yay foo' or search for 'foo' in the Pamac gui ) Try searching up the AUR repositories and install them through yay Build your own package Package Management tools pacman - The pacman package manager is one of the major distinguishing features of Arch Linux. It combines a simple binary package format with an easy-to-use build system. yay - Yet Another Yoghurt, a fast and simple AUR Helper pamac - pamac gui tool ('add/remove software' in your menu) See a typo, something missing or out of date, or anything else which can be improved? Edit this document at Github .","title":"Package Management System"},{"location":"software/pkgmngsys/#package-management-system","text":"","title":"Package Management System"},{"location":"software/pkgmngsys/#introduction","text":"CalinixOS is a distribution that uses a package management system. This system is based on the Arch Linux Package Management System , with the pacman Package Manager and with several higher level tools built on top of it, most notably Pamac (default gui). CalinixOS comes with yay preinstalled which is an AUR Helper . Know more about the AUR/Arch User Repository","title":"Introduction"},{"location":"software/pkgmngsys/#advantages-of-package-management-systems","text":"Package management systems have many advantages: It\u2019s easy to query what version of a package is installed or available. It\u2019s easy to remove a package entirely, making sure all its files are gone. It\u2019s easy to verify the integrity of the packages files, so you can see if it\u2019s been corrupted or tampered with. It\u2019s easy to upgrade a package by installing the new version and removing all the old versions files. This will make sure not to leave any lingering files from the old package around to confuse or break things. It\u2019s easy to see what packages require or provide things that other packages provide or require, so you can be sure to have the needed items for the package to function correctly. It\u2019s easy to install or remove groups of packages. In many cases it\u2019s possible to downgrade back to a previous version of a package, for example when a new version has a bug.","title":"Advantages of package management systems"},{"location":"software/pkgmngsys/#disadvantages-of-package-management-systems","text":"You are restricted to either using the versions of the package that are available or having to make your own package if you need a different version.","title":"Disadvantages of package management systems"},{"location":"software/pkgmngsys/#preferred-search-order-for-a-software","text":"If some software is missing in your installation then you should try the following steps to get the packaged version: Search in Calinix ( 'yay foo' or search for 'foo' in the Pamac gui ) Try searching up the AUR repositories and install them through yay Build your own package","title":"Preferred search order for a software"},{"location":"software/pkgmngsys/#package-management-tools","text":"pacman - The pacman package manager is one of the major distinguishing features of Arch Linux. It combines a simple binary package format with an easy-to-use build system. yay - Yet Another Yoghurt, a fast and simple AUR Helper pamac - pamac gui tool ('add/remove software' in your menu) See a typo, something missing or out of date, or anything else which can be improved? Edit this document at Github .","title":"Package Management tools"},{"location":"software/usingpacman/","text":"Using the Pacman package manager The pacman package manager is one of the major distinguishing features of CalinixOS. It combines a simple binary package format with an easy-to-use build system . The goal of pacman is to make it possible to easily manage packages, whether they are from the official repositories or the user's own builds. Pacman keeps the system up-to-date by synchronizing package lists with the master server. This server/client model also allows the user to download/install packages with a simple command, complete with all required dependencies. Usage Basic Package Operations To search the repositories for a package type: $ pacman -Ss <package-name> Alternatively use the pacsearch utility $ pacsearch -n <search-term> To install the package: $ pacman -S <package-name> To remove a package: $ pacman -R <package-name> To remove a package with all it's dependencies: $ pacman -Rnsc <package-name> Updating the System with Pacman You can update your system with: $ sudo pacman -Syy This is the CalinixOS equivalent of apt update on Debian-based distributions. To upgrade your system (basically update all of your softwae), type in: $ sudo pacman -Syu This is the CalinixOS equivalent of apt upgrade on Debian Listing All Installed Packages With Pacman You can list all the packages installed on your system along with their versions by typing : $ pacman -Q You can also view additional information about a package by using : $ pacman -Qi <package-name> For example, to view the details of the package \u201cfirefox\u201d , you can type in : $ pacman -Qi firefox Name : firefox Version : 86.0.1-1 Description : Standalone web browser from mozilla.org Architecture : x86_64 URL : https://www.mozilla.org/firefox/ Licenses : MPL GPL LGPL Groups : None Provides : None Depends On : gtk3 libxt mime-types dbus-glib ffmpeg nss ttf-font libpulse Optional Deps : networkmanager: Location detection via available WiFi networks [installed] libnotify: Notification integration [installed] pulseaudio: Audio support [installed] speech-dispatcher: Text-to-Speech hunspell-en_US: Spell checking, American English Required By : dracnmap eyewitness findsploit firefox-security-toolkit sn1per Optional For : None Conflicts With : None Replaces : None Installed Size : 217.90 MiB Packager : Jan Alexander Steffens (heftig) <heftig@archlinux.org> Build Date : Thu 11 Mar 2021 04:15:06 PM IST Install Date : Tue 16 Mar 2021 01:49:16 AM IST Install Reason : Explicitly installed Install Script : No Validated By : Signature As a bonus, you can also list all the orphaned dependencies which you have installed on your system with : $ pacman -Qdt More about Installing Packages Once you have located the package of you want to install, you can install it with : $ sudo pacman -S <package-name> Sometimes some packages might already be installed. In that case, this command shall reinstall them. You can however skip these packages with : $ sudo pacman -S <package-name> --needed You can also install packages from a tar.zst file using pacman with the help of the following syntax : $ sudo pacman -U <package-file> Other common pacman commands include: pacman -R $(pacman -Qdtq) - removes packages installed as dependencies that are no longer required by currently installed programs. pacman -Syup - checks for updates, and displays the urls of packages that need updating. pacman -Sc - clears package cache. For more Pacman commands refer to the man pages by typing man pacman at the command-line, or Pacman Read The Docs Excluding Packages From Transactions Sometimes it is useful to ignore specific packages from transactions, such as updates. One such case, for example, could be when an update includes a regression or a bug. Pacman allows you to exclude a package from the transaction: using the command line sudo pacman -Syu --ignore=<package-name> using its configuration files You can add a line to /etc/pacman.conf to exclude packages: IgnorePkg=<package-name> If you use a GUI update application which does not allow you to specify packages to exclude when they run, this method can be used.","title":"Using the Pacman package manager"},{"location":"software/usingpacman/#using-the-pacman-package-manager","text":"The pacman package manager is one of the major distinguishing features of CalinixOS. It combines a simple binary package format with an easy-to-use build system . The goal of pacman is to make it possible to easily manage packages, whether they are from the official repositories or the user's own builds. Pacman keeps the system up-to-date by synchronizing package lists with the master server. This server/client model also allows the user to download/install packages with a simple command, complete with all required dependencies.","title":"Using the Pacman package manager"},{"location":"software/usingpacman/#usage","text":"","title":"Usage"},{"location":"software/usingpacman/#basic-package-operations","text":"To search the repositories for a package type: $ pacman -Ss <package-name> Alternatively use the pacsearch utility $ pacsearch -n <search-term> To install the package: $ pacman -S <package-name> To remove a package: $ pacman -R <package-name> To remove a package with all it's dependencies: $ pacman -Rnsc <package-name>","title":"Basic Package Operations"},{"location":"software/usingpacman/#updating-the-system-with-pacman","text":"You can update your system with: $ sudo pacman -Syy This is the CalinixOS equivalent of apt update on Debian-based distributions. To upgrade your system (basically update all of your softwae), type in: $ sudo pacman -Syu This is the CalinixOS equivalent of apt upgrade on Debian","title":"Updating the System with Pacman"},{"location":"software/usingpacman/#listing-all-installed-packages-with-pacman","text":"You can list all the packages installed on your system along with their versions by typing : $ pacman -Q You can also view additional information about a package by using : $ pacman -Qi <package-name> For example, to view the details of the package \u201cfirefox\u201d , you can type in : $ pacman -Qi firefox Name : firefox Version : 86.0.1-1 Description : Standalone web browser from mozilla.org Architecture : x86_64 URL : https://www.mozilla.org/firefox/ Licenses : MPL GPL LGPL Groups : None Provides : None Depends On : gtk3 libxt mime-types dbus-glib ffmpeg nss ttf-font libpulse Optional Deps : networkmanager: Location detection via available WiFi networks [installed] libnotify: Notification integration [installed] pulseaudio: Audio support [installed] speech-dispatcher: Text-to-Speech hunspell-en_US: Spell checking, American English Required By : dracnmap eyewitness findsploit firefox-security-toolkit sn1per Optional For : None Conflicts With : None Replaces : None Installed Size : 217.90 MiB Packager : Jan Alexander Steffens (heftig) <heftig@archlinux.org> Build Date : Thu 11 Mar 2021 04:15:06 PM IST Install Date : Tue 16 Mar 2021 01:49:16 AM IST Install Reason : Explicitly installed Install Script : No Validated By : Signature As a bonus, you can also list all the orphaned dependencies which you have installed on your system with : $ pacman -Qdt","title":"Listing All Installed Packages With Pacman"},{"location":"software/usingpacman/#more-about-installing-packages","text":"Once you have located the package of you want to install, you can install it with : $ sudo pacman -S <package-name> Sometimes some packages might already be installed. In that case, this command shall reinstall them. You can however skip these packages with : $ sudo pacman -S <package-name> --needed You can also install packages from a tar.zst file using pacman with the help of the following syntax : $ sudo pacman -U <package-file> Other common pacman commands include: pacman -R $(pacman -Qdtq) - removes packages installed as dependencies that are no longer required by currently installed programs. pacman -Syup - checks for updates, and displays the urls of packages that need updating. pacman -Sc - clears package cache. For more Pacman commands refer to the man pages by typing man pacman at the command-line, or Pacman Read The Docs","title":"More about Installing Packages"},{"location":"software/usingpacman/#excluding-packages-from-transactions","text":"Sometimes it is useful to ignore specific packages from transactions, such as updates. One such case, for example, could be when an update includes a regression or a bug. Pacman allows you to exclude a package from the transaction: using the command line sudo pacman -Syu --ignore=<package-name> using its configuration files You can add a line to /etc/pacman.conf to exclude packages: IgnorePkg=<package-name> If you use a GUI update application which does not allow you to specify packages to exclude when they run, this method can be used.","title":"Excluding Packages From Transactions"},{"location":"software/virtualization/","text":"Virtual Machines A virtual machine, commonly shortened to just VM, is no different than any other physical computer like a laptop, smart phone, or server. It has a CPU, memory, disks to store your files, and can connect to the internet if needed. While the parts that make up your computer (called hardware) are physical and tangible, VMs are often thought of as virtual computers or software-defined computers within physical servers, existing only as code. Put simply virtual machines---known as VMs---are applications that create a software environment that mimics computer hardware. An operating system can then be installed into this environment. We call this a \"guest OS\", while the operating system you have installed on your physical computer is the \"host OS\". Additionally, virtualization can be enhanced with the help of dedicated system hardware! Virtual Machines vs. Dual Booting Linux There are two ways to run multiple operating systems on a computer: Dual booting Virtual machine Dual booting is good but has its downsides. For example, you can run two or more Linux distributions installed on your computer. However, it doesn't work well for everyone. Various issues can frustrate the experience, such as rebooting. The time taken to restart, select a different OS at the GRUB bootloader screen, and then boot, can be problematic. This is especially true on systems where Linux is installed alongside Windows. On slower systems, you could be waiting 5-10 minutes before you can start being productive. With anti-virus software scanning at boot, you're soon on a massive go-slow. However, running your secondary OS in a virtual machine can overcome this problem. Check if your PC supports Virtualization To check if your PC supports virtualization, fire up the terminal and enter lscpu | grep \"Virtualization\" You should see something like AMD-V, VT-x or VT-d to confirm your PC supports virtualization. Let's see the different ways of Virtualization QEMU/KVM KVM is one of the most used Virtualization software in Linux World. In fact, most cloud providers use KVM as their Hypervisor of choice. Big projects including Openstack use KVM as default Virtualization tool. Install required packages sudo pacman -Sy qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables libguestfs Enable libvirtd.service Once the installation is done, start and enable libvirtd service to start at boot: sudo systemctl enable libvirtd.service sudo systemctl start libvirtd.service Enable Normal User to Manage KVM Since we want to use our standard Linux user account to manage KVM, let\u2019s configure KVM to allow this. Open the file /etc/libvirt/libvirtd.conf for editing. Set the UNIX domain socket group ownership to libvirt, (around line 85) unix_sock_group = \"libvirt\" Set the UNIX socket permissions for the R/W socket (around line 102) unix_sock_rw_perms = \"0770\" Add your user account to libvirt group. sudo usermod -a -G libvirt $(whoami) newgrp libvirt sudo systemctl restart libvirtd.service You have successfully installed KVM, QEMU and Virt Manager on Arch Linux. You are now good to go. You can install a Linux or Windows OS Virtual Machine and build your study labs.","title":"Virtual Machines"},{"location":"software/virtualization/#virtual-machines","text":"A virtual machine, commonly shortened to just VM, is no different than any other physical computer like a laptop, smart phone, or server. It has a CPU, memory, disks to store your files, and can connect to the internet if needed. While the parts that make up your computer (called hardware) are physical and tangible, VMs are often thought of as virtual computers or software-defined computers within physical servers, existing only as code. Put simply virtual machines---known as VMs---are applications that create a software environment that mimics computer hardware. An operating system can then be installed into this environment. We call this a \"guest OS\", while the operating system you have installed on your physical computer is the \"host OS\". Additionally, virtualization can be enhanced with the help of dedicated system hardware!","title":"Virtual Machines"},{"location":"software/virtualization/#virtual-machines-vs-dual-booting-linux","text":"There are two ways to run multiple operating systems on a computer: Dual booting Virtual machine Dual booting is good but has its downsides. For example, you can run two or more Linux distributions installed on your computer. However, it doesn't work well for everyone. Various issues can frustrate the experience, such as rebooting. The time taken to restart, select a different OS at the GRUB bootloader screen, and then boot, can be problematic. This is especially true on systems where Linux is installed alongside Windows. On slower systems, you could be waiting 5-10 minutes before you can start being productive. With anti-virus software scanning at boot, you're soon on a massive go-slow. However, running your secondary OS in a virtual machine can overcome this problem.","title":"Virtual Machines vs. Dual Booting Linux"},{"location":"software/virtualization/#check-if-your-pc-supports-virtualization","text":"To check if your PC supports virtualization, fire up the terminal and enter lscpu | grep \"Virtualization\" You should see something like AMD-V, VT-x or VT-d to confirm your PC supports virtualization. Let's see the different ways of Virtualization","title":"Check if your PC supports Virtualization"},{"location":"software/virtualization/#qemukvm","text":"KVM is one of the most used Virtualization software in Linux World. In fact, most cloud providers use KVM as their Hypervisor of choice. Big projects including Openstack use KVM as default Virtualization tool.","title":"QEMU/KVM"},{"location":"software/virtualization/#install-required-packages","text":"sudo pacman -Sy qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables libguestfs","title":"Install required packages"},{"location":"software/virtualization/#enable-libvirtdservice","text":"Once the installation is done, start and enable libvirtd service to start at boot: sudo systemctl enable libvirtd.service sudo systemctl start libvirtd.service","title":"Enable libvirtd.service"},{"location":"software/virtualization/#enable-normal-user-to-manage-kvm","text":"Since we want to use our standard Linux user account to manage KVM, let\u2019s configure KVM to allow this. Open the file /etc/libvirt/libvirtd.conf for editing. Set the UNIX domain socket group ownership to libvirt, (around line 85) unix_sock_group = \"libvirt\" Set the UNIX socket permissions for the R/W socket (around line 102) unix_sock_rw_perms = \"0770\" Add your user account to libvirt group. sudo usermod -a -G libvirt $(whoami) newgrp libvirt sudo systemctl restart libvirtd.service You have successfully installed KVM, QEMU and Virt Manager on Arch Linux. You are now good to go. You can install a Linux or Windows OS Virtual Machine and build your study labs.","title":"Enable Normal User to Manage KVM"},{"location":"starters-guide/getting-started/","text":"Getting Started Downloading CalinixOS Every release of CalinixOS is available for download, whether the current stable release or upcoming preview releases. When you visit the download page you will find a link to each of the four main editions , as well as a checksum file for each. A checksum can be used to check the integrity of the disc image file you download to make sure it hasn\u2019t been corrupted during the download. Latest Stable ISO Navigate to the Download Page of all editions of Calinix. Download the latest stable ISO from the website. Latest Development ISO We use Github Actions and Artifacts to automate our disc image (ISO) building process. Hence all our latest development ISOs are in our Actions Page . Choose the latest action and in the main page of the specific action, you will find a section called Artifacts which stores our ISOs. Simply click the Artifact named Calinix <Release Tag> DevISO and a .zip archive will start downloading. Extract the archive. The ISO will be present inside the folder Torrents Our stable releases are hosted as torrents by FossTorrents . It can be directly downloaded. If you use torrents, you know how to. Download CalinixOS Torrents CalinixOS Alpha 6-4 Writing a Disc Image A disc image is not a copy-and-paste duplication of files: it\u2019s a bit-for-bit copy of the raw data that makes up the files and folders of that disc. This is why just copying a disc image file to a disc (or USB flash drive) to begin installing won\u2019t work: you\u2019ll need to use a disc burning or image writing application to translate that raw data into the files and folders. Once converted, the files can be used to run CalinixOS in LiveCD mode without having to install it to your system, and/or install CalinixOS on your system. It\u2019s important to note CalinixOS will not have full functionality when run in Live-CD mode. For example, you will not be able to save any changes to the system. Due to the amount of software included on the full edition disc images you may need to use a DVD instead of a CD. Many people routinely use a DVD rather than a CD even for the smallest disc image files. Not only is a DVD faster to burn but they allow higher data access rates so the Live-CD loads faster and the installation completes sooner. Burning to a CD/DVD in Linux If not already installed, several different software burning applications should be available for installation from your distribution\u2019s Software Center / Software Manager / Package Manager / repositories. Popular burners include XFBurn, K3b, and Brasero. Which one you choose is entirely down to personal choice, though your operating system will usually install one suitable for your desktop environment. To simplify things a little, the following steps for burning your downloaded CalinixOS disc image use Brasero . Burning using Brasero - Insert a blank CD/DVD. - Start the Brasero software burner. - Click the Burn Image - Burn an existing CD/DVD image to disc button to open the Image Burning Setup window. - Click the button beneath the title Select a disc image to write to open up your file manager. Locate and double-click the downloaded disc image file to load it. Upon automatically returning to the Image Burning Setup window, note that the disc image file is now listed as the disc image to write. - The blank CD/DVD you inserted should be automatically listed underneath the title Select a disc to write to. If not, click the button to select it manually. - Click the properties button to open the properties window, and then click the button beneath the title Burning Speed . We strongly recommend you select the slowest speed available. Once selected, click the Close button. We strongly recommend you select the slowest speed available when burning to disc in order minimise the possibility of corruption during the burning process. - Click the Burn button to start the burning process. If necessary, follow any on-screen instructions provided. Burning using Windows Disc Image Burner Right-clicking on the disc image file and selecting Burn disc image will start the Windows Disc Image Burner program. This makes the process of burning to a disc very straightforward: Insert a blank CD/DVD into your disc drive. Start Windows Disc Image Burner . Select your CD/DVD drive in the Disc burner menu. Click Burn . Writing to a USB flash drive in Linux To take advantage of the faster access times and much quieter nature of a USB flash drive, there are a number of methods of writing the disc image file. One of the easiest is to use SUSE Studio Imagewriter . SUSE Studio Imagewriter should be available for installation from your distribution\u2019s Software Center / Software Manager / Package Manager / repositories. Once SUSE Studio Imagewriter has been downloaded and installed, ensure that your USB flash drive is plugged in before starting the application. The process of using SUSE Studio Imagewriter is very straightforward: Click on the centre icon. Navigate to where you downloaded the disc image file, and select it. Ensure that your USB flash drive has been selected from the dropdown menu. Click on the Write button. Once it has finished, reboot your system, making sure to select the USB flash drive as the boot device in the BIOS menu (or its UEFI equivalent). Using the CLI If you don\u2019t want to install extra software, and you are comfortable using the command line, there\u2019s an even easier way of writing a disc image to a USB device. Connect the USB flash drive to your PC, open a terminal and cd to where you downloaded the disc image. Check the device identifier with: sudo fdisk -l . Write the image with: sudo dd if=path/to/{ISO File} of=/dev/(Device identifier from above) bs=4M My USB drive is at /dev/sdb and ISO is at ~/Downloads/Calinix-Arch-21.11.21-x86_64.iso So I would use: sudo dd if=~/Downloads/Calinix-Arch-21.11.21-x86_64.iso of=/dev/sdb bs=4M Once completed reboot your system and boot from the USB drive by selecting it as the boot device in the BIOS menu (or its UEFI equivalent). Writing to a USB flash drive in Microsoft Windows Rufus For Windows users using USB media, Rufus is highly recommended. Select the USB key to be used in the Device menu. Then, on the line beginning with Boot selection, click on Select to select your downloaded disc image, and then Start. After doing so, select DD Image in the window that appears. Rufus with recommended settings Etcher Another recommended piece of software is Etcher. It is incredibly simple to use. All you have to do is select the disc image, the USB drive, and start flashing the image!","title":"Getting Started"},{"location":"starters-guide/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"starters-guide/getting-started/#downloading-calinixos","text":"Every release of CalinixOS is available for download, whether the current stable release or upcoming preview releases. When you visit the download page you will find a link to each of the four main editions , as well as a checksum file for each. A checksum can be used to check the integrity of the disc image file you download to make sure it hasn\u2019t been corrupted during the download.","title":"Downloading CalinixOS"},{"location":"starters-guide/getting-started/#latest-stable-iso","text":"Navigate to the Download Page of all editions of Calinix. Download the latest stable ISO from the website.","title":"Latest Stable ISO"},{"location":"starters-guide/getting-started/#latest-development-iso","text":"We use Github Actions and Artifacts to automate our disc image (ISO) building process. Hence all our latest development ISOs are in our Actions Page . Choose the latest action and in the main page of the specific action, you will find a section called Artifacts which stores our ISOs. Simply click the Artifact named Calinix <Release Tag> DevISO and a .zip archive will start downloading. Extract the archive. The ISO will be present inside the folder","title":"Latest Development ISO"},{"location":"starters-guide/getting-started/#torrents","text":"Our stable releases are hosted as torrents by FossTorrents . It can be directly downloaded. If you use torrents, you know how to. Download CalinixOS Torrents CalinixOS Alpha 6-4","title":"Torrents"},{"location":"starters-guide/getting-started/#writing-a-disc-image","text":"A disc image is not a copy-and-paste duplication of files: it\u2019s a bit-for-bit copy of the raw data that makes up the files and folders of that disc. This is why just copying a disc image file to a disc (or USB flash drive) to begin installing won\u2019t work: you\u2019ll need to use a disc burning or image writing application to translate that raw data into the files and folders. Once converted, the files can be used to run CalinixOS in LiveCD mode without having to install it to your system, and/or install CalinixOS on your system. It\u2019s important to note CalinixOS will not have full functionality when run in Live-CD mode. For example, you will not be able to save any changes to the system. Due to the amount of software included on the full edition disc images you may need to use a DVD instead of a CD. Many people routinely use a DVD rather than a CD even for the smallest disc image files. Not only is a DVD faster to burn but they allow higher data access rates so the Live-CD loads faster and the installation completes sooner.","title":"Writing a Disc Image"},{"location":"starters-guide/getting-started/#burning-to-a-cddvd-in-linux","text":"If not already installed, several different software burning applications should be available for installation from your distribution\u2019s Software Center / Software Manager / Package Manager / repositories. Popular burners include XFBurn, K3b, and Brasero. Which one you choose is entirely down to personal choice, though your operating system will usually install one suitable for your desktop environment. To simplify things a little, the following steps for burning your downloaded CalinixOS disc image use Brasero . Burning using Brasero - Insert a blank CD/DVD. - Start the Brasero software burner. - Click the Burn Image - Burn an existing CD/DVD image to disc button to open the Image Burning Setup window. - Click the button beneath the title Select a disc image to write to open up your file manager. Locate and double-click the downloaded disc image file to load it. Upon automatically returning to the Image Burning Setup window, note that the disc image file is now listed as the disc image to write. - The blank CD/DVD you inserted should be automatically listed underneath the title Select a disc to write to. If not, click the button to select it manually. - Click the properties button to open the properties window, and then click the button beneath the title Burning Speed . We strongly recommend you select the slowest speed available. Once selected, click the Close button. We strongly recommend you select the slowest speed available when burning to disc in order minimise the possibility of corruption during the burning process. - Click the Burn button to start the burning process. If necessary, follow any on-screen instructions provided.","title":"Burning to a CD/DVD in Linux"},{"location":"starters-guide/getting-started/#burning-using-windows-disc-image-burner","text":"Right-clicking on the disc image file and selecting Burn disc image will start the Windows Disc Image Burner program. This makes the process of burning to a disc very straightforward: Insert a blank CD/DVD into your disc drive. Start Windows Disc Image Burner . Select your CD/DVD drive in the Disc burner menu. Click Burn .","title":"Burning using Windows Disc Image Burner"},{"location":"starters-guide/getting-started/#writing-to-a-usb-flash-drive-in-linux","text":"To take advantage of the faster access times and much quieter nature of a USB flash drive, there are a number of methods of writing the disc image file. One of the easiest is to use SUSE Studio Imagewriter . SUSE Studio Imagewriter should be available for installation from your distribution\u2019s Software Center / Software Manager / Package Manager / repositories. Once SUSE Studio Imagewriter has been downloaded and installed, ensure that your USB flash drive is plugged in before starting the application. The process of using SUSE Studio Imagewriter is very straightforward: Click on the centre icon. Navigate to where you downloaded the disc image file, and select it. Ensure that your USB flash drive has been selected from the dropdown menu. Click on the Write button. Once it has finished, reboot your system, making sure to select the USB flash drive as the boot device in the BIOS menu (or its UEFI equivalent).","title":"Writing to a USB flash drive in Linux"},{"location":"starters-guide/getting-started/#using-the-cli","text":"If you don\u2019t want to install extra software, and you are comfortable using the command line, there\u2019s an even easier way of writing a disc image to a USB device. Connect the USB flash drive to your PC, open a terminal and cd to where you downloaded the disc image. Check the device identifier with: sudo fdisk -l . Write the image with: sudo dd if=path/to/{ISO File} of=/dev/(Device identifier from above) bs=4M My USB drive is at /dev/sdb and ISO is at ~/Downloads/Calinix-Arch-21.11.21-x86_64.iso So I would use: sudo dd if=~/Downloads/Calinix-Arch-21.11.21-x86_64.iso of=/dev/sdb bs=4M Once completed reboot your system and boot from the USB drive by selecting it as the boot device in the BIOS menu (or its UEFI equivalent).","title":"Using the CLI"},{"location":"starters-guide/getting-started/#writing-to-a-usb-flash-drive-in-microsoft-windows","text":"","title":"Writing to a USB flash drive in Microsoft Windows"},{"location":"starters-guide/getting-started/#rufus","text":"For Windows users using USB media, Rufus is highly recommended. Select the USB key to be used in the Device menu. Then, on the line beginning with Boot selection, click on Select to select your downloaded disc image, and then Start. After doing so, select DD Image in the window that appears. Rufus with recommended settings","title":"Rufus"},{"location":"starters-guide/getting-started/#etcher","text":"Another recommended piece of software is Etcher. It is incredibly simple to use. All you have to do is select the disc image, the USB drive, and start flashing the image!","title":"Etcher"},{"location":"starters-guide/installation/","text":"Installation Guide Booting the Live environment Booting the Live environment, whether from CD/DVD or USB flash drive, will give you an overview of the CalinixOS environment and let you test how well it will run on your machine. This is very useful to check before committing to install a new operating system! For best results you should be connected to the Internet. If you have a wired Ethernet connection, and plug in before booting the Live environment, CalinixOS will automatically set up a connection. If you have a wireless (Wi-Fi) connection you can set up the wireless network once you have reached the CalinixOS desktop. Just click the arrow icon in the taskbar And click the Network Manager applet (which will probably show a <-> sign if not connected). Connect to internet using the applet. The method of selecting the boot device varies considerably across machines. You may need to spam (tap continuosly) one key, for example Esc, Del, or F10, to select the boot device. Or, you may need to set the option in your BIOS. If you\u2019re not sure, your machine\u2019s user guide will have detail of the method you need, alternatively a web search will also quickly turn up the answer. Note On Macs, keep your finger pressed on the Alt or Option key after hearing the boot sound. BIOS vs UEFI Note UEFI is the commonly agreed on name for both the EFI & UEFI standards which merged. It does not include the old EFI v1, or Apple\u2019s own non-standard version of EFI. Some newer hardware do not use the well-known BIOS to manage boot options. Instead, a new one named UEFI (Unified Extensible Firmware Interface) is used. It still has BIOS-like menus and often has a legacy mode, which uses BIOS. UEFI often goes hand in hand with the infamous Secure Boot option that makes it more difficult to boot operating systems outside of a select few. If your computer came with Microsoft Windows 8 or later installed, your computer probably uses UEFI and has Secure Boot enabled by default. However, the Linux community reacted to this and developed means to install and boot Linux on those systems as well. Some installers, such as Calamares which is used by CalinixOS, can even automate the process so it makes virtually no difference to the user whether their machine uses UEFI or BIOS. Booting in UEFI mode The most important step is to ensure that your machine does not have Fast Boot enabled . Only a very limited number of operating systems will boot with this enabled. You must disable Fast Boot in your UEFI/BIOS before proceeding; if you don\u2019t know how to do this please refer to your computer\u2019s user manual, as it differs for all computers.","title":"Installation Guide"},{"location":"starters-guide/installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"starters-guide/installation/#booting-the-live-environment","text":"Booting the Live environment, whether from CD/DVD or USB flash drive, will give you an overview of the CalinixOS environment and let you test how well it will run on your machine. This is very useful to check before committing to install a new operating system! For best results you should be connected to the Internet. If you have a wired Ethernet connection, and plug in before booting the Live environment, CalinixOS will automatically set up a connection. If you have a wireless (Wi-Fi) connection you can set up the wireless network once you have reached the CalinixOS desktop. Just click the arrow icon in the taskbar And click the Network Manager applet (which will probably show a <-> sign if not connected). Connect to internet using the applet. The method of selecting the boot device varies considerably across machines. You may need to spam (tap continuosly) one key, for example Esc, Del, or F10, to select the boot device. Or, you may need to set the option in your BIOS. If you\u2019re not sure, your machine\u2019s user guide will have detail of the method you need, alternatively a web search will also quickly turn up the answer. Note On Macs, keep your finger pressed on the Alt or Option key after hearing the boot sound.","title":"Booting the Live environment"},{"location":"starters-guide/installation/#bios-vs-uefi","text":"Note UEFI is the commonly agreed on name for both the EFI & UEFI standards which merged. It does not include the old EFI v1, or Apple\u2019s own non-standard version of EFI. Some newer hardware do not use the well-known BIOS to manage boot options. Instead, a new one named UEFI (Unified Extensible Firmware Interface) is used. It still has BIOS-like menus and often has a legacy mode, which uses BIOS. UEFI often goes hand in hand with the infamous Secure Boot option that makes it more difficult to boot operating systems outside of a select few. If your computer came with Microsoft Windows 8 or later installed, your computer probably uses UEFI and has Secure Boot enabled by default. However, the Linux community reacted to this and developed means to install and boot Linux on those systems as well. Some installers, such as Calamares which is used by CalinixOS, can even automate the process so it makes virtually no difference to the user whether their machine uses UEFI or BIOS.","title":"BIOS vs UEFI"},{"location":"starters-guide/installation/#booting-in-uefi-mode","text":"The most important step is to ensure that your machine does not have Fast Boot enabled . Only a very limited number of operating systems will boot with this enabled. You must disable Fast Boot in your UEFI/BIOS before proceeding; if you don\u2019t know how to do this please refer to your computer\u2019s user manual, as it differs for all computers.","title":"Booting in UEFI mode"}]}